name: CI/CD to Azure Web App

# Dispara sempre que algu√©m der push na branch prod (ou manualmente via UI)
on:
  push:
    branches: [ prod ]
  workflow_dispatch:

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      # ---------------------------------------------------------
      # 1) Pega o c√≥digo
      # ---------------------------------------------------------
      - name: üõéÔ∏è Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # ---------------------------------------------------------
      # 2) Instala Node.js (para Cypress e wait-on)
      # ---------------------------------------------------------
      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      # ---------------------------------------------------------
      # 3) Instala depend√™ncias Node (Cypress, wait-on, etc)
      # ---------------------------------------------------------
      - name: üì¶ Install npm dependencies
        working-directory: ./
        run: |
          npm ci

      # ---------------------------------------------------------
      # 4) Instala Python (para rodar Django)
      # ---------------------------------------------------------
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'   # ajuste para a vers√£o usada no projeto

      # ---------------------------------------------------------
      # 5) Cria virtualenv, instala deps Python e faz migrate
      # ---------------------------------------------------------
      - name: üõ†Ô∏è Install Python dependencies & Migrate
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          python manage.py migrate --noinput

      # ---------------------------------------------------------
      # 6) Inicia o servidor Django em background
      # ---------------------------------------------------------
      - name: üöÄ Start Django server in background
        run: |
          source venv/bin/activate
          nohup python manage.py runserver 0.0.0.0:8000 &

      # ---------------------------------------------------------
      # 7) Aguardar Django ficar ‚Äúup‚Äù
      # ---------------------------------------------------------
      - name: ‚è≥ Wait for Django to be ready
        run: |
          npx wait-on http://localhost:8000

      # ---------------------------------------------------------
      # 8) Rodar testes do Cypress (headless)
      # ---------------------------------------------------------
      - name: üß™ Run Cypress tests
        run: |
          npx cypress run --headless
        env:
          CYPRESS_baseUrl: http://localhost:8000

      # ---------------------------------------------------------
      # 9) Gera o ZIP de deploy (apenas o c√≥digo relevante)
      # ---------------------------------------------------------
      - name: üì¶ Prepare ZIP for deploy
        run: |
          # Gerar ZIP excluindo pastas que n√£o devem ir ao App Service
          zip -r deploy.zip . \
            -x "venv/*" \
            -x ".git/*" \
            -x "cypress/*" \
            -x ".github/*" \
            -x "*.env" \
            -x "media/fotos_perfil/*" \
            -x "__pycache__/*"
          ls -lh deploy.zip

      # ---------------------------------------------------------
      # 10) Login no Azure (via Service Principal)
      # ---------------------------------------------------------
      - name: üîê Azure Login
        if: ${{ success() }}
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # ---------------------------------------------------------
      # 11) Deploy ao App Service (ZIP Deploy com Azure CLI)
      # ---------------------------------------------------------
      - name: üö¢ Deploy to Azure Web App (zip deploy)
        if: ${{ success() }}
        env:
          AZURE_RESOURCE_GROUP: crescer-juntos_group   # ajuste conforme seu Resource Group
          AZURE_APP_NAME: crescer-juntos                # ajuste conforme nome exato do App Service
        run: |
          echo "Deploying deploy.zip to Web App '$AZURE_APP_NAME' in Resource Group '$AZURE_RESOURCE_GROUP'..."
          az webapp deployment source config-zip \
            --resource-group $AZURE_RESOURCE_GROUP \
            --name $AZURE_APP_NAME \
            --src deploy.zip

      # ---------------------------------------------------------
      # 12) Notificar caso algo falhe
      # ---------------------------------------------------------
      - name: üö® Notify on failure
        if: ${{ failure() }}
        run: echo "Algum passo falhou! O deploy N√ÉO foi executado."
